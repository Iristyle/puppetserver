# Don't run Azure when a branch is updated, only when a PR is updated.
# Prevents double builds when a PR is made from the main repo and not a fork.
trigger: none
pr:
  autoCancel: true
  branches:
    include:
    - '*'

pool:
  # self-hosted agent on Windows 10 1709 environment
  # includes newer Docker engine with LCOW enabled, new build of LCOW image
  # includes Ruby 2.5, Go 1.10, Node.js 10.10, hadolint
  name: Default

variables:
  NAMESPACE: puppet

steps:
- checkout: self
  clean: true
- powershell: |
    $line = '=' * 80
    Write-Host "$line`nWindows`n$line`n"
    Get-ComputerInfo |
      select WindowsProductName, WindowsVersion, OsHardwareAbstractionLayer |
      Out-String |
      Write-Host
    #
    # Azure
    #
    $assetTag = Get-WmiObject -class Win32_SystemEnclosure -namespace root\CIMV2 |
      Select -ExpandProperty SMBIOSAssetTag

    # only Azure VMs have this hard-coded DMI value
    if ($assetTag -eq '7783-7084-3265-9085-8269-3286-77')
    {
      Write-Host "`n`n$line`nAzure`n$line`n"
      Invoke-RestMethod -Headers @{'Metadata'='true'} -URI http://169.254.169.254/metadata/instance?api-version=2017-12-01 -Method Get |
        ConvertTo-Json -Depth 10 |
        Write-Host
    }
    #
    # Docker
    #
    Write-Host "`n`n$line`nDocker`n$line`n"
    docker version
    docker images
    docker info
    sc.exe qc docker
    #
    # Ruby
    #
    Write-Host "`n`n$line`nRuby`n$line`n"
    ruby --version
    gem --version
    gem env
    bundle --version
    #
    # Environment
    #
    Write-Host "`n`n$line`nEnvironment`n$line`n"
    Get-ChildItem Env: | % { Write-Host "$($_.Key): $($_.Value)"  }
  displayName: Diagnostic Host Information
  name: hostinfo

- powershell: |
    . ./docker/ci/build.ps1
    Lint-Dockerfile -Path ./docker/puppetserver-standalone/Dockerfile
  displayName: Lint PuppetServer-Standalone Dockerfile
  name: lint_puppetserverstandalone_dockerfile
- powershell: |
    . ./docker/ci/build.ps1
    Lint-Dockerfile -Path ./docker/puppetserver/Dockerfile
  displayName: Lint PuppetServer Dockerfile
  name: lint_puppetserver_dockerfile
- powershell: |
    . ./docker/ci/build.ps1
    Build-Container -Name puppetserver-standalone -Namespace $ENV:NAMESPACE -Context ..
  displayName: Build PuppetServer-Standalone Container
  name: build_puppetserverstandalone_container
- powershell: |
    . ./docker/ci/build.ps1
    Build-Container -Name puppetserver -Namespace $ENV:NAMESPACE -Pull $false
  displayName: Build PuppetServer Container
  name: build_puppetserver_container
- powershell: |
    . ./docker/ci/build.ps1
    Invoke-ContainerTest -Name puppetserver-standalone -Namespace $ENV:NAMESPACE -Specs minimal-spec
  displayName: Test PuppetServer-Standalone
  name: test_puppetserverstandalone
- task: PublishTestResults@2
  displayName: Publish PuppetServer Standalone Test Results
  inputs:
    testResultsFormat: 'JUnit'
    testResultsFiles: 'docker/puppetserver-standalone/TEST-*.xml'
    testRunTitle: PuppetServer-Standalone Test Results
- powershell: |
    . ./docker/ci/build.ps1
    Invoke-ContainerTest -Name puppetserver -Namespace $ENV:NAMESPACE -Specs docker/minimal-spec
  displayName: Test PuppetServer
  name: test_puppetserver
- task: PublishTestResults@2
  displayName: Publish PuppetServer Test Results
  inputs:
    testResultsFormat: 'JUnit'
    testResultsFiles: 'docker/puppetserver/TEST-*.xml'
    testRunTitle: PuppetServer Test Results
- powershell: |
    . ./docker/ci/build.ps1
    Clear-ContainerBuilds -Name puppetserver
    Clear-ContainerBuilds -Name puppetserver-standalone
  displayName: Container Cleanup
  name: cleanup_containers
  condition: always()
